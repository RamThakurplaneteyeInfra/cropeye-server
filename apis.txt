# users apis
 
  üîê Authentication

  1.  Get JWT Token 

 
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{"username": "your_username", "password": "your_password"}'
 
> Response will include `access` and `refresh` tokens.

  2.  Refresh JWT Token 

 
curl -X POST http://localhost:8000/api/token/refresh/ \
  -H "Content-Type: application/json" \
  -d '{"refresh": "your_refresh_token"}'
 
 
  üë§ User Management Endpoints

  3.  List All Users 

 
curl -X GET http://localhost:8000/api/users/ \
  -H "Authorization: Bearer your_access_token"
 
  4.  Create New User 

 
curl -X POST http://localhost:8000/api/users/ \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
        "username": "newuser",
        "password": "Password123!",
        "password2": "Password123!",
        "email": "newuser@example.com",
        "first_name": "New",
        "last_name": "User",
        "role": "farmer",
        "phone_number": "1234567890",
        "address": "Some Address"
      }'
 
  5.  Retrieve User by ID 

 
curl -X GET http://localhost:8000/api/users/5/ \
  -H "Authorization: Bearer your_access_token"
 
  6.  Update User by ID \

 
curl -X PUT http://localhost:8000/api/users/5/ \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
        "email": "updated@example.com",
        "first_name": "Updated",
        "last_name": "User",
        "phone_number": "9876543210",
        "address": "New Address"
      }'
 
  7.  Delete User 

 
curl -X DELETE http://localhost:8000/api/users/5/ \
  -H "Authorization: Bearer your_access_token"
 
  8.  Get Current Logged-in User 

 
curl -X GET http://localhost:8000/api/users/me/ \
  -H "Authorization: Bearer your_access_token"
 
 
  üîê OTP Endpoints (if implemented in `UserViewSet`)

  9.  Send OTP 

 
curl -X POST http://localhost:8000/api/otp/ \
  -H "Content-Type: application/json" \
  -d '{"email": "farmer1@example.com"}'
 
  10.  Verify OTP 

 
curl -X POST http://localhost:8000/api/verify-otp/ \
  -H "Content-Type: application/json" \
  -d '{"email": "farmer1@example.com", "otp": "123456"}'
 
 
üîê Step 1: Authenticate as Field Officer

curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{
    "username": "fieldofficer1",
    "password": "yourpassword"
}'
Response:


{
  "access": "your_access_token",
  "refresh": "your_refresh_token"
}
Save the access token.

üë§ Step 2: Try to Create a Farmer

curl -X POST http://localhost:8000/api/users/ \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
  "username": "shuta",
  "email": "shuta@example.com",
  "password": "SecurePass@123",
  "first_name": "shuta",
  "last_name": "Patil",
  "role_id": 2,
  "phone_number": "9876543210",
  "address": "Maliwadi",
  "village": "Rajapur",
  "taluka": "Karjat",
  "district": "Ahmednagar",
  "state": "Maharashtra"
}
'
Expected Result:

json

{
  "id": 12,
  "username": "newfarmer1",
  "email": "farmer1@example.com",
  ...
  "role": "farmer"
}
‚úÖ Success! Field officer can add a farmer.

‚ùå Step 3: Try to Create a Non-Farmer (e.g. Agronomist)

curl -X POST http://localhost:8000/api/users/ \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
  "username": "shuta",
  "email": "shuta@example.com",
  "password": "SecurePass@123",
  "first_name": "shuta",
  "last_name": "Patil",
  "role_id": 2,
  "phone_number": "9876543210",
  "address": "Maliwadi",
  "village": "Rajapur",
  "taluka": "Karjat",
  "district": "Ahmednagar",
  "state": "Maharashtra"
}
'
Expected Result (403 or 400 error):


{
  "role": [
    "Invalid role. Allowed roles: farmer"
  ]
}

‚úÖ This is the correct behavior ‚Äî field officers are restricted to creating only farmers.

üîÅ Step 4: List Users (Optional - Only for Admins or High Privilege)
If the field officer attempts:


curl -X GET http://localhost:8000/api/users/ \
  -H "Authorization: Bearer your_access_token"
They may receive a 403 Forbidden, depending on your UserViewSet permission setting


farm api: 

---

  üîê Authentication

All endpoints require authentication (`IsAuthenticated`). Use a token or session-based auth.

Example using token:

```bash
-H "Authorization: Token <your_token_here>"
```

---

  üåæ NEW: Auto-Assignment System for Field Officers

**IMPORTANT UPDATE**: The system now automatically assigns the most recently created farmer to new plots and farms when created by field officers. This eliminates the need for manual farmer ID assignment in the enrollment workflow.

**Auto-Assignment Workflow**:
1. Field Officer creates Farmer via `/users/`
2. Field Officer creates Plot via `/plots/` ‚Üí **Auto-assigns to recent farmer**
3. Field Officer creates Farm via `/farms/` ‚Üí **Auto-assigns to recent farmer**

**Time Window**: 30 minutes (with fallback to farmers created today)
**Permissions**: Only field officers with `role='fieldofficer'` can trigger auto-assignment

---

  üì¶ API Endpoints & Parameters

---

   0. Helper: Recent Farmers (Field Officers Only)

```bash
GET /farms/recent-farmers/
```

**Purpose**: Get recent farmers created by the current field officer with detailed plot information including IDs, GPS coordinates, and polygon boundaries.

**Enhanced Response** (now includes complete plot details):
```json
{
  "most_recent_farmer": {
    "id": 45,
    "username": "farmer123",
    "email": "farmer@example.com",
    "first_name": "John",
    "last_name": "Doe",
    "phone_number": "9876543210",
    "address": "Farm Address",
    "village": "Sample Village",
    "district": "Sample District",
    "state": "Maharashtra",
    "taluka": "Sample Taluka",
    "date_joined": "2024-01-15T10:30:00Z",
    "role": {
      "id": 3,
      "name": "farmer",
      "display_name": "Farmer"
    },
    "plots_count": 2,
    "plots": [
      {
        "id": 35,
        "fastapi_plot_id": "GAT003_PLOT003",
        "gat_number": "GAT003",
        "plot_number": "PLOT003",
        "village": "Rajapur",
        "taluka": "Karjat",
        "district": "Ahmednagar",
        "state": "Maharashtra",
        "country": "India",
        "pin_code": "422605",
        "location": {
          "type": "Point",
          "coordinates": [74.215000, 19.567000]
        },
        "boundary": {
          "type": "Polygon",
          "coordinates": [[[74.214, 19.566], [74.216, 19.566], [74.216, 19.568], [74.214, 19.568], [74.214, 19.566]]]
        },
        "created_at": "2024-01-15T10:30:00Z",
        "updated_at": "2024-01-15T10:30:00Z",
        "farms_count": 1,
        "farms": [
          {
            "farm_uid": "2dbe327b-4c1a-4f2b-8c3d-123456789abc",
            "address": "Farm Address, Village",
            "area_size": "10.75",
            "soil_type": "Loamy",
            "crop_type": "Sugarcane",
            "plantation_type": "Adsali",
            "planting_method": "3 Bud Method",
            "created_at": "2024-01-15T10:30:00Z",
            "irrigations_count": 1,
            "irrigations": [
              {
                "irrigation_type": "Drip Irrigation",
                "irrigation_source": "Well",
                "installation_date": "2024-01-01",
                "status": true,
                "motor_horsepower": 5.0,
                "pipe_width_inches": 2.5,
                "flow_rate_lph": 100.0,
                "plants_per_acre": 1500
              }
            ]
          }
        ]
      },
      {
        "id": 37,
        "fastapi_plot_id": "TEST001_TESTPLOT001",
        "gat_number": "TEST001",
        "plot_number": "TESTPLOT001",
        "village": "TestVillage",
        "taluka": "TestTaluka",
        "district": "TestDistrict",
        "state": "Maharashtra",
        "country": "India",
        "pin_code": "411001",
        "location": {
          "type": "Point",
          "coordinates": [73.855294, 18.519560]
        },
        "boundary": {
          "type": "Polygon",
          "coordinates": [[[73.854, 18.519], [73.856, 18.519], [73.856, 18.520], [73.854, 18.520], [73.854, 18.519]]]
        },
        "created_at": "2024-01-15T11:00:00Z",
        "updated_at": "2024-01-15T11:00:00Z",
        "farms_count": 1,
        "farms": [
          {
            "farm_uid": "3abc456d-7e8f-9012-3456-789abcdef012",
            "address": "Another Farm Address, TestVillage",
            "area_size": "5.25",
            "soil_type": "Clay",
            "crop_type": "Rice",
            "plantation_type": "Pre-Seasonal",
            "planting_method": "2 Bud Method",
            "created_at": "2024-01-15T11:00:00Z",
            "irrigations_count": 1,
            "irrigations": [
              {
                "irrigation_type": "Sprinkler Irrigation",
                "irrigation_source": "Canal",
                "installation_date": "2024-01-15",
                "status": true,
                "motor_horsepower": 3.0,
                "pipe_width_inches": 3.0,
                "flow_rate_lph": 150.0,
                "plants_per_acre": 2000
              }
            ]
          }
        ]
      }
    ]
  },
  "farmers_today": [
    {
      "id": 45,
      "username": "farmer123",
      "email": "farmer@example.com",
      "first_name": "John",
      "last_name": "Doe",
      "phone_number": "9876543210",
      "village": "Sample Village",
      "district": "Sample District",
      "plots_count": 2,
      "plots": [
        // Same plot structure as above
      ]
    }
  ],
  "count": 1
}
```

**Enhanced Features**:
- ‚úÖ **Plot IDs**: Each plot includes unique database ID (`id`) 
- ‚úÖ **FastAPI Plot IDs**: Same plot IDs used by all FastAPI services (`fastapi_plot_id`)
- ‚úÖ **GPS Coordinates**: Exact latitude/longitude in GeoJSON Point format
- ‚úÖ **Polygon Boundaries**: Complete boundary coordinates in GeoJSON Polygon format
- ‚úÖ **Complete Address**: Village, taluka, district, state, country, PIN code
- ‚úÖ **Farmer Details**: Full contact information and address
- ‚úÖ **Plot Count**: Number of plots owned by each farmer
- ‚úÖ **Farm Details**: Complete farm information for each plot
- ‚úÖ **Agricultural Data**: Crop type, plantation type, planting method
- ‚úÖ **Irrigation Systems**: Complete irrigation details and specifications
- ‚úÖ **Timestamps**: Creation and update dates for plots and farms

**üåæ Agricultural Information Included**:
- **Crop Type**: Type of crop grown (e.g., Sugarcane, Rice, Wheat)
- **Plantation Type**: Seasonal classification (Adsali, Suru, Ratoon, Pre-Seasonal, Post-Seasonal)
- **Planting Method**: Cultivation technique (3 Bud Method, 2 Bud Method, 1 Bud Method, etc.)
- **Soil Type**: Soil classification (Loamy, Clay, Sandy, etc.)
- **Farm Area**: Size in acres
- **Installation Date**: When irrigation was installed (plantation date reference)

**üíß Irrigation System Details**:
- **Irrigation Type**: Method (Drip, Sprinkler, Flood, Center Pivot, Manual)
- **Water Source**: Source of water (Well, Canal, River, Borewell)
- **Technical Specs**: Motor horsepower, pipe width, flow rate, plant density
- **Status**: Active/Inactive irrigation systems
- **Installation Date**: When the irrigation system was installed

**üîó FastAPI Integration**:
- The `fastapi_plot_id` field uses the format `"GAT_NUMBER_PLOT_NUMBER"`
- These IDs match exactly with all FastAPI services (Admin.py, ET.py, field.py, main.py, events.py)
- Use `fastapi_plot_id` when calling FastAPI analysis services
- Use `id` for Django database operations

**Access**: Field officers only (403 error for other roles)

**Example Request**:
```bash
# Get authentication token first
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{"username": "field_officer_username", "password": "your_password"}'

# Use the token to get recent farmers with plot details
curl -X GET http://localhost:8000/api/farms/recent-farmers/ \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \
  -H "Content-Type: application/json"
```

**Use Cases**:
- üìç **Plot Mapping**: Use GPS coordinates and boundaries for GIS applications
- üó∫Ô∏è **Location Visualization**: Display farmer plots on maps with farm details
- üìä **Agricultural Analysis**: Analyze crop patterns, plantation methods, and irrigation efficiency
- üåæ **Farm Management**: Complete agricultural data for farm planning and monitoring
- üíß **Irrigation Planning**: Assess irrigation systems and water management
- üîó **Integration**: Link farmer data with spatial analysis services using FastAPI plot IDs
- üì± **Mobile Apps**: Comprehensive farmer and farm data for field officers
- üìà **Reporting**: Generate detailed reports with agricultural and irrigation data
- üéØ **Decision Making**: Support agricultural decisions with complete farm information

### Farmer Profile API - Get My Complete Agricultural Data

**Endpoint**: `GET /api/farms/my-profile/`

```bash
GET /farms/my-profile/
```

**Purpose**: Complete farmer profile API for farmers to fetch all their agricultural data when they log in, including personal details, plots with FastAPI IDs, farm details, and irrigation systems.

**Authentication**: Farmer role required (403 error for other roles)

**Enhanced Response** (Complete farmer agricultural profile):
```json
{
  "success": true,
  "farmer_profile": {
    "id": 58,
    "username": "faxokew458",
    "email": "demo222@gmail.com",
    "first_name": "OMRAM",
    "last_name": "Thakur",
    "phone_number": "9123456874",
    "address": "Farm Address",
    "village": "Shirdi",
    "district": "Ahmedabad",
    "state": "Maharashtra",
    "taluka": "Sample Taluka",
    "date_joined": "2024-01-15T10:30:00Z",
    "last_login": "2024-01-16T08:15:00Z",
    "role": {
      "id": 3,
      "name": "farmer",
      "display_name": "Farmer"
    }
  },
  "agricultural_summary": {
    "total_plots": 1,
    "total_farms": 1,
    "total_irrigations": 1,
    "total_farm_area": 0.07,
    "crop_types": ["Sugarcane"],
    "plantation_types": ["Adsali"],
    "irrigation_types": ["Drip"]
  },
  "plots": [
    {
      "id": 46,
      "fastapi_plot_id": "GAT22_22",
      "gat_number": "GAT22",
      "plot_number": "22",
      "village": "Shirdi",
      "taluka": "Sample Taluka",
      "district": "Ahmedabad",
      "state": "Maharashtra",
      "country": "India",
      "pin_code": "422605",
      "location": {
        "type": "Point",
        "coordinates": [73.85553239999999, 18.5203924]
      },
      "boundary": {
        "type": "Polygon",
        "coordinates": [[[73.854, 18.519], [73.856, 18.519], [73.856, 18.520], [73.854, 18.520], [73.854, 18.519]]]
      },
      "created_at": "2024-01-15T10:30:00Z",
      "updated_at": "2024-01-15T10:30:00Z",
      "created_by": {
        "id": 2,
        "username": "ram_officer",
        "full_name": "Ram Thakur",
        "phone_number": "9876543210"
      },
      "farms_count": 1,
      "farms": [
        {
          "farm_uid": "2dbe327b-4c1a-4f2b-8c3d-123456789abc",
          "address": "Farm Address, Village",
          "area_size": "0.07",
          "soil_type": "Loamy",
          "crop_type": "Sugarcane",
          "plantation_type": "Adsali",
          "planting_method": "3 Bud Method",
          "created_at": "2024-01-15T10:30:00Z",
          "created_by": {
            "id": 2,
            "username": "ram_officer",
            "full_name": "Ram Thakur"
          },
          "irrigations_count": 1,
          "irrigations": [
            {
              "irrigation_type": "Drip",
              "irrigation_source": "Well",
              "installation_date": "2025-08-21",
              "status": true,
              "motor_horsepower": null,
              "pipe_width_inches": null,
              "flow_rate_lph": null,
              "plants_per_acre": null,
              "distance_motor_to_plot_m": null,
              "emitters_count": null
            }
          ]
        }
      ]
    }
  ],
  "fastapi_integration": {
    "plot_ids_format": "GAT_NUMBER_PLOT_NUMBER",
    "compatible_services": ["Admin.py", "ET.py", "field.py", "main.py", "events.py"],
    "note": "Use fastapi_plot_id for calling FastAPI analysis services"
  }
}
```

**Complete Features**:
- ‚úÖ **Personal Profile**: Complete farmer personal information
- ‚úÖ **Agricultural Summary**: Statistics of all farming activities
- ‚úÖ **Plot Details**: All plots with FastAPI-compatible plot IDs
- ‚úÖ **Farm Information**: Crop type, plantation type, planting method, soil type
- ‚úÖ **Irrigation Systems**: Complete irrigation details and technical specifications
- ‚úÖ **GPS & Boundaries**: Exact coordinates and polygon boundaries
- ‚úÖ **Field Officer Info**: Details of who registered the farmer and farms
- ‚úÖ **FastAPI Integration**: Direct compatibility with all analysis services

**Example Request**:
```bash
# Get farmer authentication token
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{"username": "farmer_username", "password": "farmer_password"}'

# Get complete farmer profile and agricultural data
curl -X GET http://localhost:8000/api/farms/my-profile/ \
  -H "Authorization: Bearer FARMER_ACCESS_TOKEN" \
  -H "Content-Type: application/json"
```

**Farmer Login Use Cases**:
- üßë‚Äçüåæ **Dashboard**: Complete agricultural overview for farmer's mobile/web app
- üì± **Mobile App**: All data needed for farmer's agricultural management app
- üó∫Ô∏è **Plot Mapping**: GPS coordinates and boundaries for field visualization
- üåæ **Crop Management**: Plantation types, methods, and crop information
- üíß **Irrigation Control**: Irrigation system status and specifications
- üîó **Analysis Services**: FastAPI plot IDs for accessing analytical services
- üìä **Performance Tracking**: Historical data and agricultural summaries
- üìû **Support Contact**: Field officer contact information for assistance

### Get My Registered Farmers

**Endpoint**: `GET /api/farms/my-farmers/`
**Purpose**: Get all farmers registered by the currently logged-in field officer with their complete data
**Access**: Field officers only

**Response (Success)**:
```json
{
  "success": true,
  "field_officer": {
    "id": 1,
    "username": "ram_officer",
    "full_name": "Ram Officer"
  },
  "summary": {
    "total_farmers": 3,
    "total_plots": 5,
    "total_farms": 4,
    "total_irrigations": 2
  },
  "farmers": [
    {
      "farmer": {
        "id": 41,
        "username": "rajesh_farmer_final",
        "email": "rajesh_final@example.com",
        "first_name": "Rajesh",
        "last_name": "Patil",
        "phone_number": "9876543210",
        "address": "Maliwadi Village",
        "village": "Rajapur",
        "district": "Ahmednagar",
        "state": "Maharashtra",
        "role": {
          "id": 3,
          "name": "farmer"
        }
      },
      "registration_summary": {
        "plots_count": 1,
        "farms_count": 1,
        "irrigations_count": 1,
        "registration_date": "2024-01-15 10:30:45"
      },
      "plots": [
        {
          "id": 27,
          "gat_number": "GAT003_FINAL",
          "plot_number": "PLOT003_FINAL",
          "village": "Rajapur",
          "district": "Ahmednagar",
          "state": "Maharashtra",
          "created_at": "2024-01-15 10:32:10",
          "has_location": true,
          "has_boundary": true
        }
      ],
      "farms": [
        {
          "id": 20,
          "farm_uid": "e81abe52-801f-474b-ae48-5590b1e90ff3",
          "address": "Rajesh Farm, Rajapur Village, Karjat",
          "area_size": "10.75",
          "soil_type": "Loamy",
          "crop_type": "Sugarcane",
          "plantation_type": "adsali",
          "planting_method": "3_bud",
          "created_at": "2024-01-15 10:32:15",
          "irrigations_count": 1
        }
      ]
    }
  ]
}
```

**Response (Error - Not Field Officer)**:
```json
{
  "error": "Only field officers can access this endpoint"
}
```

**Features**:
- ‚úÖ **Field Officer Specific** - Shows only farmers registered by the logged-in field officer
- ‚úÖ **Complete Data** - Includes farmer details, plots, farms, and irrigation counts
- ‚úÖ **Summary Statistics** - Total counts for quick overview
- ‚úÖ **Chronological Order** - Farmers ordered by registration date (newest first)
- ‚úÖ **Geometry Status** - Shows if plots have location/boundary data
- ‚úÖ **Detailed Metadata** - Creation timestamps and comprehensive farm details

---

   üîÑ PLOT SYNCHRONIZATION APIs (NEW)

These endpoints allow manual synchronization of plots to all FastAPI services when automatic sync fails.

```bash
POST /api/farms/sync-plots-to-apis/   # Manual plot sync to all FastAPI services
```

### Manual Plot Synchronization

**Endpoint**: `POST /api/farms/sync-plots-to-apis/`
**Purpose**: Manually sync plots to all FastAPI services (Admin.py, ET.py, field.py, main.py, events.py)
**Access**: Field officers, admins, and managers only

**Sync Specific Plots**:
```json
{
  "plot_ids": [1, 2, 3]
}
```

**Sync All Plots**:
```json
{
  "sync_all": true
}
```

**Response (Success)**:
```json
{
  "success": true,
  "message": "Sync completed for 3 plots",
  "sync_summary": {
    "total_plots": 3,
    "successful_syncs": 15,
    "failed_syncs": 0,
    "plot_results": [
      {
        "plot_id": 1,
        "gat_number": "GAT001",
        "successful_services": ["events.py", "soil.py/main.py", "Admin.py", "ET.py", "field.py"],
        "failed_services": [],
        "success_count": 5,
        "failure_count": 0
      }
    ]
  }
}
```

**Management Command (Alternative)**:
```bash
# Sync all plots
python manage.py sync_all_plots_to_apis

# Sync specific plot
python manage.py sync_all_plots_to_apis --plot-id 1

# Sync recent plots only
python manage.py sync_all_plots_to_apis --recent 10

# Dry run (show what would be synced)
python manage.py sync_all_plots_to_apis --dry-run
```

---

   üóëÔ∏è CASCADING DELETION SYSTEM (NEW)

When a farmer is deleted, all their associated data is automatically deleted to maintain data integrity.

### Deletion Hierarchy

```
üë§ Farmer (User)
‚îú‚îÄ‚îÄ üìç Plots ‚Üí Automatically deleted
‚îú‚îÄ‚îÄ üè† Farms ‚Üí Automatically deleted  
‚îî‚îÄ‚îÄ üíß Irrigations ‚Üí Automatically deleted (via farm deletion)
```

### How It Works

1. **Farmer Deletion Triggers**: When `User.delete()` is called on a farmer
2. **Automatic Cascade**: Django signals detect the deletion and cascade to:
   - All plots owned by the farmer (`Plot.farmer` relationship)
   - All farms owned by the farmer (`Farm.farm_owner` relationship) 
   - All irrigations tied to those farms (`FarmIrrigation.farm` relationship)
3. **FastAPI Sync**: Plot deletions are automatically synced to all FastAPI services
4. **Logging**: All deletions are logged for audit purposes

### API Usage

```bash
# Delete farmer via API (if implemented)
DELETE /api/users/{farmer_id}/

# Or via Django admin/shell
farmer = User.objects.get(id=farmer_id)
farmer.delete()  # Cascades to all related objects
```

### What Gets Deleted

- ‚úÖ **Farmer record** (User with role='farmer')
- ‚úÖ **All plots** owned by the farmer
- ‚úÖ **All farms** owned by the farmer  
- ‚úÖ **All irrigation systems** in those farms
- ‚úÖ **FastAPI sync** - plots removed from all services

### Safety Features

- üõ°Ô∏è **Only affects farmers** - other user types (field officers, admins) are not affected
- üõ°Ô∏è **Atomic operation** - either all objects are deleted or none
- üõ°Ô∏è **Logging** - all deletions are logged with full details
- üõ°Ô∏è **Error handling** - robust error handling for sync failures

---

   üöÄ UNIFIED FARMER REGISTRATION APIs (NEW)

These endpoints combine multiple registration steps into single API calls, making frontend development much easier.

```bash
POST /api/farms/register-farmer/          # Complete registration
POST /api/farms/quick-farmer-registration/ # Farmer only
```

### Complete Farmer Registration

**Endpoint**: `POST /api/farms/register-farmer/`
**Purpose**: Register farmer + plot + farm + irrigation in one API call
**Access**: Field officers only

**Request Body**:
```json
{
  "farmer": {
    "username": "rajesh_farmer",
    "email": "rajesh@example.com",
    "password": "SecurePass@123",
    "first_name": "Rajesh",
    "last_name": "Patil",
    "phone_number": "9876543210",
    "address": "Maliwadi Village",
    "village": "Rajapur",
    "district": "Ahmednagar", 
    "state": "Maharashtra",
    "taluka": "Karjat"
  },
  "plot": {
    "gat_number": "GAT001",
    "plot_number": "PLOT001",
    "village": "Rajapur",
    "taluka": "Karjat",
    "district": "Ahmednagar",
    "state": "Maharashtra",
    "country": "India",
    "pin_code": "422605",
    "location": {
      "type": "Point",
      "coordinates": [74.215, 19.567]
    },
    "boundary": {
      "type": "Polygon",
      "coordinates": [[[74.214, 19.566], [74.216, 19.566], [74.216, 19.568], [74.214, 19.568], [74.214, 19.566]]]
    }
  },
  "farm": {
    "address": "Rajesh Farm, Rajapur Village, Karjat",
    "area_size": "10.75",
    "plantation_date": "2024-01-15",
    "spacing_a": "3.0",
    "spacing_b": "1.5",
    "soil_type_name": "Loamy",
    "crop_type_name": "Sugarcane",
    "plantation_type": "adsali",
    "planting_method": "3_bud"
  },
  "irrigation": {
    "irrigation_type_name": "drip",
    "status": true,
    "location": {
      "type": "Point",
      "coordinates": [74.215, 19.567]
    },
    "plants_per_acre": 2000,
    "flow_rate_lph": 2.5,
    "emitters_count": 150
  }
}
```

**Response (Success)**:
```json
{
  "success": true,
  "message": "Farmer registration completed successfully",
  "registration_summary": {
    "farmer": {
      "id": 45,
      "username": "rajesh_farmer",
      "email": "rajesh@example.com",
      "first_name": "Rajesh",
      "last_name": "Patil",
      "role": {"name": "farmer"},
      "phone_number": "9876543210",
      "village": "Rajapur",
      "created_at": "2024-08-17T19:30:00Z"
    },
    "plot": {
      "id": 12,
      "gat_number": "GAT001",
      "plot_number": "PLOT001",
      "village": "Rajapur",
      "farmer": {"id": 45, "username": "rajesh_farmer"},
      "created_by": {"id": 2, "username": "fieldofficer1"}
    },
    "farm": {
      "id": 8,
      "farm_uid": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
      "farm_owner": {"id": 45, "username": "rajesh_farmer"},
      "plot": {"id": 12, "gat_number": "GAT001"},
      "address": "Rajesh Farm, Rajapur Village, Karjat",
      "area_size": "10.75",
      "spacing_a": 3.0,
      "spacing_b": 1.5,
      "plants_in_field": 71667,
      "soil_type": {"name": "Loamy"},
      "crop_type": {"crop_type": "Sugarcane"}
    },
    "irrigation": {
      "id": 3,
      "irrigation_type": {"name": "drip"},
      "status": true,
      "plants_per_acre": 2000,
      "flow_rate_lph": 2.5,
      "emitters_count": 150
    }
  },
  "ids": {
    "farmer_id": 45,
    "plot_id": 12,
    "farm_id": 8,
    "irrigation_id": 3
  }
}
```

**Field Descriptions**:

#### Farm Section (Updated with Spacing Fields):
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `address` | string | ‚úÖ | Farm address |
| `area_size` | string | ‚úÖ | Area in acres |
| `spacing_a` | string | ‚ùå | **Spacing A in meters (between rows)** |
| `spacing_b` | string | ‚ùå | **Spacing B in meters (between plants)** |
| `soil_type_name` | string | ‚ùå | Soil type name |
| `crop_type_name` | string | ‚ùå | Crop type name |
| `plantation_type` | string | ‚ùå | Plantation type |
| `planting_method` | string | ‚ùå | Planting method |

#### Irrigation Section (Updated):
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `irrigation_type_name` | string | ‚úÖ | "drip" or "flood" |
| `status` | boolean | ‚ùå | Active status (default: true) |
| `location` | object | ‚ùå | Point coordinates |

**For Drip Irrigation:**
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `plants_per_acre` | integer | ‚ùå | Plants per acre |
| `flow_rate_lph` | float | ‚ùå | Flow rate in LPH |
| `emitters_count` | integer | ‚ùå | Number of emitters |

**For Flood Irrigation:**
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `motor_horsepower` | float | ‚ùå | Motor horsepower |
| `pipe_width_inches` | float | ‚ùå | Pipe width in inches |
| `distance_motor_to_plot_m` | float | ‚ùå | Distance in meters |

### Irrigation Examples

#### Drip Irrigation Example:
```json
{
  "farmer": {
    "username": "drip_farmer",
    "email": "drip@example.com",
    "password": "password123",
    "first_name": "Drip",
    "last_name": "Farmer",
    "phone_number": "+1234567890",
    "address": "123 Drip Farm Road",
    "village": "Drip Village",
    "district": "Drip District",
    "state": "Drip State"
  },
  "plot": {
    "gat_number": "GAT002",
    "village": "Drip Village",
    "district": "Drip District",
    "state": "Drip State",
    "location": {"type": "Point", "coordinates": [77.209, 28.6139]}
  },
  "farm": {
    "address": "123 Drip Farm Road, Drip Village",
    "area_size": "2.5",
    "spacing_a": "3.0",
    "spacing_b": "1.5",
    "soil_type_name": "Sandy Loam",
    "crop_type_name": "Tomato"
  },
  "irrigation": {
    "irrigation_type_name": "drip",
    "status": true,
    "location": {"type": "Point", "coordinates": [77.209, 28.6139]},
    "plants_per_acre": 2000,
    "flow_rate_lph": 2.5,
    "emitters_count": 150
  }
}
```

#### Flood Irrigation Example:
```json
{
  "farmer": {
    "username": "flood_farmer",
    "email": "flood@example.com",
    "password": "password123",
    "first_name": "Flood",
    "last_name": "Farmer",
    "phone_number": "+1987654321",
    "address": "456 Flood Farm Road",
    "village": "Flood Village",
    "district": "Flood District",
    "state": "Flood State"
  },
  "plot": {
    "gat_number": "GAT003",
    "village": "Flood Village",
    "district": "Flood District",
    "state": "Flood State",
    "location": {"type": "Point", "coordinates": [77.210, 28.614]}
  },
  "farm": {
    "address": "456 Flood Farm Road, Flood Village",
    "area_size": "4.0",
    "spacing_a": "2.0",
    "spacing_b": "1.0",
    "soil_type_name": "Clay Soil",
    "crop_type_name": "Rice"
  },
  "irrigation": {
    "irrigation_type_name": "flood",
    "status": true,
    "location": {"type": "Point", "coordinates": [77.210, 28.614]},
    "motor_horsepower": 7.5,
    "pipe_width_inches": 6.0,
    "distance_motor_to_plot_m": 75.0
  }
}
```

**Key Features**:
- ‚úÖ **Spacing Fields**: `spacing_a` and `spacing_b` for plant calculation
- ‚úÖ **Automatic Plant Calculation**: Formula: `(area_size_acres * 43560) / (spacing_a * spacing_b)` where spacing values are used as-is without unit conversion
- ‚úÖ **Updated Irrigation**: Removed obsolete fields, added proper drip/flood fields
- ‚úÖ **Complete Registration**: Farmer + Plot + Farm + Irrigation in one API call
- ‚úÖ **Atomic Transaction**: All-or-nothing operation

### Quick Farmer Registration

**Endpoint**: `POST /api/farms/quick-farmer-registration/`
**Purpose**: Register farmer only (for use with existing auto-assignment)
**Access**: Field officers only

**Request Body**:
```json
{
  "username": "simple_farmer",
  "email": "simple@example.com",
  "password": "SecurePass@123",
  "first_name": "Simple",
  "last_name": "Farmer",
  "phone_number": "9876543210",
  "address": "Village Address",
  "village": "Village Name",
  "district": "District Name",
  "state": "State Name",
  "taluka": "Taluka Name"
}
```

**Response (Success)**:
```json
{
  "success": true,
  "message": "Farmer registered successfully",
  "farmer": {
    "id": 46,
    "username": "simple_farmer",
    "email": "simple@example.com",
    "first_name": "Simple",
    "last_name": "Farmer",
    "role": {"name": "farmer"},
    "created_at": "2024-08-17T19:35:00Z"
  },
  "farmer_id": 46
}
```

### Error Responses

**Validation Error**:
```json
{
  "success": false,
  "error": "Username 'rajesh_farmer' already exists"
}
```

**Permission Error**:
```json
{
  "error": "Only field officers can register farmers"
}
```

---

   1. Soil Types 

 # List / Create / Update / Delete

```bash
GET /soil-types/
POST /soil-types/
```

 POST body (JSON): 

```json
{
  "name": "Loamy",
  "description": "Rich and fertile soil.",
  "properties": "pH 6.5, well-drained"
}
```

---

   2. Crop Types 

```bash
GET /crop-types/
POST /crop-types/
```

 POST body: 

```json
{
  "crop_type": "Wheat",
  "plantation_type": "Rabi",
  "planting_method": "Broadcast"
}
```

---

   3. Farms ‚ú® (AUTO-ASSIGNMENT ENABLED)

```bash
GET /farms/
POST /farms/
```

 Query Params for GET: 

* `my_farms=true`
* `owner=USER_ID`
* `lat=...&lng=...&radius=5` (geo-filter within 5 km)
* `search=some text`

 POST body (Field Officer - Auto-Assignment): 

```json
{
    "address": "123 Farm Lane, Village XYZ",
    "area_size": "10.50",
    "soil_type_id": 1,
    "crop_type_id": 1,
    "plot_id": 1,
    "farm_document": null
}
```

**üéØ AUTO-ASSIGNMENT**: When created by field officers, the `farm_owner` field is automatically set to the most recently created farmer (within 30 minutes). No need to specify `farm_owner_id`!

 POST Response (with Auto-Assignment): 

```json
{
  "id": 8,
  "farm_uid": "abc-123-def-456",
  "farm_owner": {
    "id": 45,
    "username": "farmer123",
    "first_name": "John",
    "last_name": "Doe",
    "email": "farmer123@example.com"
  },
  "created_by": {
    "id": 2,
    "username": "fieldofficer1",
    "first_name": "Officer",
    "last_name": "One"
  },
  "plot": {
    "id": 1,
    "gat_number": "GAT001",
    "plot_number": "PLOT001",
    "village": "Nandgaon"
  },
  "address": "123 Farm Lane, Village XYZ",
  "area_size": "10.50",
  "soil_type": {
    "id": 1,
    "name": "Loamy"
  },
  "crop_type": {
    "id": 1,
    "crop_type": "Wheat"
  },
  "farm_document": null,
  "created_at": "2024-08-17T19:30:00Z",
  "updated_at": "2024-08-17T19:30:00Z"
}
```

 Manual Assignment (Override): 

```json
{
    "address": "123 Farm Lane, Village XYZ",
    "area_size": "10.50",
    "farm_owner_id": 45,  // Explicit farmer assignment
    "soil_type_id": 1,
    "crop_type_id": 1,
    "plot_id": 1
}
```

 Error Response (No Recent Farmer): 

```json
{
  "farm_owner_id": [
    "No recent farmer found. Please specify farm_owner_id or create a farmer first."
  ]
}
```

---

   4. Farm GeoJSON 

```bash
GET /farms/geojson/
```

Supports same filters as `/farms/`.

---

   5. Plots ‚ú® (AUTO-ASSIGNMENT ENABLED)

```bash
GET /plots/
POST /plots/
```

 Query Params: 

* `my_farms=true`
* `farm=FARM_ID`
* `has_boundary=true`
* `village=...&state=...` (filter fields)

 POST body (Field Officer - Auto-Assignment): 

```json
{
  "gat_number": "11",
  "plot_number": "23",
  "village": "Nandgaon",
  "taluka": "Sangamner",
  "district": "Ahmednagar",
  "state": "Maharashtra",
  "country": "India",
  "pin_code": "422605",
  "location": {
    "type": "Point",
    "coordinates": [74.215, 19.567]
  },
  "boundary": {
    "type": "Polygon",
    "coordinates": [
      [
        [74.214, 19.566],
        [74.216, 19.566],
        [74.216, 19.568],
        [74.214, 19.568],
        [74.214, 19.566]
      ]
    ]
  }
}
```

**üéØ AUTO-ASSIGNMENT**: When created by field officers, the `farmer` field is automatically set to the most recently created farmer (within 30 minutes).

 POST Response (with Auto-Assignment): 

```json
{
  "id": 12,
  "gat_number": "11",
  "plot_number": "23", 
  "village": "Nandgaon",
  "taluka": "Sangamner",
  "district": "Ahmednagar",
  "state": "Maharashtra",
  "country": "India",
  "pin_code": "422605",
  "location": {
    "type": "Point",
    "coordinates": [74.215, 19.567]
  },
  "boundary": {
    "type": "Polygon",
    "coordinates": [...]
  },
  "farmer": {
    "id": 45,
    "username": "farmer123",
    "first_name": "John",
    "last_name": "Doe",
    "email": "farmer123@example.com"
  },
  "created_by": {
    "id": 2,
    "username": "fieldofficer1",
    "first_name": "Officer",
    "last_name": "One"
  },
  "created_at": "2024-08-17T19:30:00Z",
  "updated_at": "2024-08-17T19:30:00Z"
}
```

 Manual Assignment (Override): 

```json
{
  "gat_number": "11",
  "plot_number": "23",
  "farmer_id": 45,  // Explicit farmer assignment
  "village": "Nandgaon",
  // ... other fields
}
```

---

   6. Plot GeoJSON 

```bash
GET /plots/geojson/
```

Supports same filters as `/plots/`.

---

   7. Farm Images 

```bash
GET /farm-images/
POST /farm-images/
```

 Query Params: 

* `farm=FARM_ID`
* `my_farms=true`
* `start_date=2024-01-01`
* `end_date=2024-12-31`

 POST (multipart/form-data): 

```bash
curl -X POST http://localhost:8000/farm-images/ \
  -H "Authorization: Token <TOKEN>" \
  -F "farm=1" \
  -F "title=Test Image" \
  -F "image=@/path/to/image.jpg" \
  -F "capture_date=2024-07-29" \
  -F "notes=Initial survey"
```

---

   8. Farm Sensors 

```bash
GET /farm-sensors/
POST /farm-sensors/
```

 Query Params: 

* `farm=FARM_ID`
* `my_farms=true`
* `type=Soil Moisture`
* `status=true`

 POST body: 

```json
{
  "farm": 1,
  "name": "Soil Sensor A",
  "sensor_type": 1,
  "location": "POINT(75.123 19.456)",
  "installation_date": "2024-01-01",
  "last_maintenance": "2024-06-01",
  "status": true
}
```

---

   9. Farm Irrigation 

```bash
GET /farm-irrigations/
POST /farm-irrigations/
```

 Query Params: 

* `farm=FARM_ID`
* `my_farms=true`
* `type=Drip`
* `status=false`

 POST body: 

```json
{
  "farm": 1,
  "irrigation_type": 1,
  "irrigation_source": "Well",
  "location": "POINT(75.123 19.456)",
  "installation_date": "2024-01-01",
  "last_maintenance": "2024-06-01",
  "status": true
}
```

---

  ‚úÖ Bonus: Example `curl` GET Request with Filters

```bash
curl -X GET "http://localhost:8000/farms/?lat=19.456&lng=75.123&radius=5&my_farms=true" \
     -H "Authorization: Token <your_token_here>"
```



 ---

  üåæ Complete Auto-Assignment Workflow Example

**FIELD OFFICER FARMER ENROLLMENT WORKFLOW**

This example shows the complete process for a field officer to enroll a farmer and create associated plots and farms with automatic assignment.

---

 Step 1: Authenticate as Field Officer 

```bash
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{
    "username": "fieldofficer1",
    "password": "yourpassword"
  }'
```

**Response**:
```json
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGc...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc..."
}
```

---

 Step 2: Create Farmer 

```bash
curl -X POST http://localhost:8000/api/users/ \
  -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc..." \
  -H "Content-Type: application/json" \
  -d '{
    "username": "farmer_rajesh",
    "email": "rajesh@example.com",
    "password": "SecurePass@123",
    "first_name": "Rajesh",
    "last_name": "Patil",
    "role_id": 2,
    "phone_number": "9876543210",
    "address": "Maliwadi Village",
    "village": "Rajapur",
    "taluka": "Karjat",
    "district": "Ahmednagar",
    "state": "Maharashtra"
  }'
```

**Response**:
```json
{
  "id": 45,
  "username": "farmer_rajesh",
  "email": "rajesh@example.com",
  "first_name": "Rajesh",
  "last_name": "Patil",
  "role": {"id": 2, "name": "farmer"},
  "phone_number": "9876543210",
  "village": "Rajapur",
  "created_at": "2024-08-17T19:25:00Z"
}
```

---

 Step 3: Create Plot (Auto-assigns to Rajesh) 

```bash
curl -X POST http://localhost:8000/farms/plots/ \
  -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc..." \
  -H "Content-Type: application/json" \
  -d '{
    "gat_number": "GAT001",
    "plot_number": "PLOT001",
    "village": "Rajapur",
    "taluka": "Karjat",
    "district": "Ahmednagar",
    "state": "Maharashtra",
    "country": "India",
    "pin_code": "422605",
    "location": {
      "type": "Point",
      "coordinates": [74.215, 19.567]
    },
    "boundary": {
      "type": "Polygon",
      "coordinates": [
        [
          [74.214, 19.566],
          [74.216, 19.566], 
          [74.216, 19.568],
          [74.214, 19.568],
          [74.214, 19.566]
        ]
      ]
    }
  }'
```

**Response** (Note the auto-assigned farmer):
```json
{
  "id": 12,
  "gat_number": "GAT001", 
  "plot_number": "PLOT001",
  "village": "Rajapur",
  "taluka": "Karjat",
  "district": "Ahmednagar",
  "state": "Maharashtra",
  "farmer": {
    "id": 45,
    "username": "farmer_rajesh",
    "first_name": "Rajesh",
    "last_name": "Patil"
  },
  "created_by": {
    "id": 2,
    "username": "fieldofficer1"
  },
  "created_at": "2024-08-17T19:27:00Z"
}
```

---

 Step 4: Create Farm (Auto-assigns to Rajesh) 

```bash
curl -X POST http://localhost:8000/farms/farms/ \
  -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc..." \
  -H "Content-Type: application/json" \
  -d '{
    "address": "Rajesh Farm, Rajapur Village, Karjat",
    "area_size": "10.75",
    "plot_id": 12,
    "soil_type_id": 1,
    "crop_type_id": 1
  }'
```

**Response** (Note the auto-assigned farm_owner):
```json
{
  "id": 8,
  "farm_uid": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
  "farm_owner": {
    "id": 45,
    "username": "farmer_rajesh", 
    "first_name": "Rajesh",
    "last_name": "Patil"
  },
  "created_by": {
    "id": 2,
    "username": "fieldofficer1"
  },
  "plot": {
    "id": 12,
    "gat_number": "GAT001",
    "plot_number": "PLOT001",
    "village": "Rajapur"
  },
  "address": "Rajesh Farm, Rajapur Village, Karjat",
  "area_size": "10.75",
  "created_at": "2024-08-17T19:28:00Z"
}
```

---

 Step 5: Verify Recent Farmers (Optional) 

```bash
curl -X GET http://localhost:8000/farms/farms/recent-farmers/ \
  -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc..."
```

**Response**:
```json
{
  "most_recent_farmer": {
    "id": 45,
    "username": "farmer_rajesh",
    "first_name": "Rajesh",
    "last_name": "Patil"
  },
  "farmers_today": [
    {
      "id": 45,
      "username": "farmer_rajesh",
      "first_name": "Rajesh",
      "last_name": "Patil"
    }
  ],
  "count": 1
}
```

---

 üéØ Key Benefits of Auto-Assignment 

‚úÖ **Zero Manual Lookup**: No need to remember or lookup farmer IDs  
‚úÖ **Error Prevention**: Eliminates wrong farmer assignments  
‚úÖ **Streamlined Workflow**: Faster farmer enrollment process  
‚úÖ **Automatic Relationships**: Perfect Farmer ‚Üí Plot ‚Üí Farm hierarchy  
‚úÖ **Time-Based Logic**: Intelligent 30-minute assignment window  
‚úÖ **Field Officer Isolation**: Each officer gets their own assignments  

---

 üö® Error Scenarios 

**No Recent Farmer Found**:
```json
{
  "farm_owner_id": [
    "No recent farmer found. Please specify farm_owner_id or create a farmer first."
  ]
}
```

**Manual Override** (if auto-assignment fails):
```bash
# Specify explicit farmer_id
curl -X POST http://localhost:8000/farms/farms/ \
  -H "Authorization: Bearer ..." \
  -d '{
    "address": "Farm Address",
    "area_size": "10.5", 
    "farm_owner_id": 45,  // Explicit assignment
    "plot_id": 12
  }'
```

---

 üéØ NEW: Simplified Frontend Development 

**Instead of multiple API calls**, you can now use:

### Option 1: Complete Registration (Recommended)
```bash
# Single API call for everything
POST /api/farms/register-farmer/
```
‚úÖ **Creates**: Farmer + Plot + Farm + Irrigation  
‚úÖ **Returns**: All created objects with IDs  
‚úÖ **Atomic**: All-or-nothing transaction  

### Option 2: Quick + Auto-Assignment
```bash
# Step 1: Quick farmer registration
POST /api/farms/quick-farmer-registration/

# Step 2: Create plot (auto-assigns to farmer)
POST /api/farms/plots/

# Step 3: Create farm (auto-assigns to farmer) 
POST /api/farms/farms/
```
‚úÖ **Simpler**: Fewer fields per request  
‚úÖ **Flexible**: Can add details later  
‚úÖ **Auto-linked**: Uses 30-minute auto-assignment  

### Option 3: Manual (Old Way)
```bash
POST /api/users/         # Create farmer
POST /api/farms/plots/   # Create plot
POST /api/farms/farms/   # Create farm  
# + manual farmer_id assignment
```

---

Note:

* Replace `YOUR_ACCESS_TOKEN` with a valid JWT or token.
* Replace numeric IDs (`farm`, `soil_type_id`, `current_crop_id`, etc.) with actual IDs from your database.
* Geo fields require `type` and `coordinates` in [GeoJSON format](https://geojson.org/).
* **Auto-assignment works within 30 minutes** of farmer creation
* **Field officers only**: Auto-assignment is restricted to users with `role='fieldofficer'`
* **NEW**: Unified registration APIs make frontend development much easier!

---

## üîÑ FastAPI Plot Refresh System

### Problem Solved
When Django backend restarts, FastAPI services lose their in-memory plot data and show empty plots (0 plots) even though Django database contains the plots.

### Solution: Refresh Endpoints
All FastAPI services now have refresh endpoints to reload plots from Django:

#### **POST /refresh-from-django**
Available on all FastAPI services:
- **main.py** (port 8003): `http://localhost:8003/refresh-from-django`
- **ET.py** (port 8009): `http://localhost:8009/refresh-from-django`
- **field.py** (port 7002): `http://localhost:7002/refresh-from-django`
- **Admin.py** (port 7030): `http://localhost:7030/refresh-from-django`
- **events.py** (port 9000): `http://localhost:9000/refresh-from-django`

**Response:**
```json
{
  "status": "success",
  "message": "Successfully refreshed 6 plots from Django",
  "plot_count": 6,
  "plots_with_django_ids": 6
}
```

### Easy Refresh Methods

#### **Method 1: Automated Script (Recommended)**
```bash
# Run this after Django restarts
source envm/bin/activate
python refresh_all_apis.py
```

#### **Method 2: Django Management Command**
```bash
# Alternative method
source envm/bin/activate
python manage.py refresh_fastapi_services
python manage.py sync_all_plots_to_apis
```

#### **Method 3: Manual Service Refresh**
```bash
# Refresh individual services
curl -X POST http://localhost:8003/refresh-from-django
curl -X POST http://localhost:8009/refresh-from-django
curl -X POST http://localhost:7002/refresh-from-django
curl -X POST http://localhost:7030/refresh-from-django
curl -X POST http://localhost:9000/refresh-from-django
```

### Verification
Check that all services have plots:
```bash
curl http://localhost:8003/plots/ | jq length  # Should return plot count
curl http://localhost:8009/plots/ | jq length  # Should return plot count
curl http://localhost:7002/plots/ | jq length  # Should return plot count
curl http://localhost:7030/plots/ | jq length  # Should return plot count
curl http://localhost:9000/plots/ | jq length  # Should return plot count
```

### When to Use
- ‚úÖ After Django backend restarts
- ‚úÖ When FastAPI services show 0 plots but Django has plots in database
- ‚úÖ When plot data gets out of sync between Django and FastAPI services
- ‚úÖ For routine maintenance and sync verification

**Result**: All FastAPI services will have the same plot data as Django database, ensuring perfect synchronization! üéâ

# COMPREHENSIVE API DOCUMENTATION
# Updated: 2025-01-19
# Enhanced with Complete Data Fields for Farmer Profile API

## üåæ FARMER PROFILE API - COMPLETE DATA

### GET /api/farms/my-profile/
**Purpose**: Get complete farmer profile with ALL agricultural data and details

**Authentication**: Bearer Token (Farmer only)
**Access**: Only users with role='farmer'

**Response**: Complete farmer profile including:
- ‚úÖ **Personal Profile**: All farmer details, contact info, address
- ‚úÖ **Plot Details**: Complete plot information with GPS coordinates and boundaries
- ‚úÖ **Farm Details**: All farm data including crop types, soil types, documents
- ‚úÖ **Irrigation Details**: Complete irrigation system information with GPS locations
- ‚úÖ **FastAPI Integration**: Plot IDs compatible with all analysis services
- ‚úÖ **Ownership Details**: Who created what and when
- ‚úÖ **Agricultural Summary**: Statistics and overview

---

## üìä COMPLETE DATA STRUCTURE

### 1. FARMER PROFILE SECTION
```json
{
  "farmer_profile": {
    "id": 58,
    "username": "faxokew458",
    "email": "demo222@gmail.com",
    "personal_info": {
      "first_name": "OMRAM",
      "last_name": "Thakur",
      "full_name": "OMRAM Thakur",
      "phone_number": "9123456874",
      "profile_picture": {
        "url": "/media/profile_pics/photo.jpg",
        "name": "photo.jpg"
      }
    },
    "address_info": {
      "address": "Shraddha Park Housing Society",
      "village": "Shirdi",
      "district": "Ahmedabad",
      "state": "Maharashtra",
      "taluka": "Niphad",
      "full_address": "Shraddha Park Housing Society, Shirdi, Niphad, Ahmedabad, Maharashtra"
    },
    "account_info": {
      "date_joined": "2025-01-15T10:30:00Z",
      "last_login": "2025-01-19T08:45:00Z",
      "is_active": true,
      "created_at": "2025-01-15T10:30:00Z",
      "updated_at": "2025-01-19T08:45:00Z"
    },
    "role": {
      "id": 3,
      "name": "farmer",
      "display_name": "Farmer"
    }
  }
}
```

### 2. PLOT DETAILS SECTION (Complete)
```json
{
  "plots": [
    {
      "id": 46,
      "fastapi_plot_id": "GAT22_22",
      "gat_number": "GAT22",
      "plot_number": "22",
      "address": {
        "village": "Shirdi",
        "taluka": "Niphad",
        "district": "Ahmedabad",
        "state": "Maharashtra",
        "country": "India",
        "pin_code": "423109",
        "full_address": "Shirdi, Niphad, Ahmedabad, Maharashtra, India - 423109"
      },
      "coordinates": {
        "location": {
          "type": "Point",
          "coordinates": [73.85553239999999, 18.5203924],
          "latitude": 18.5203924,
          "longitude": 73.85553239999999
        },
        "boundary": {
          "type": "Polygon",
          "coordinates": [[[73.855, 18.520], [73.856, 18.520], [73.856, 18.521], [73.855, 18.521], [73.855, 18.520]]],
          "has_boundary": true
        }
      },
      "timestamps": {
        "created_at": "2025-08-19T07:23:15.929838Z",
        "updated_at": "2025-08-19T07:23:15.929851Z"
      },
      "ownership": {
        "farmer": {
          "id": 58,
          "username": "faxokew458",
          "full_name": "OMRAM Thakur",
          "email": "demo222@gmail.com",
          "phone_number": "9123456874"
        },
        "created_by": {
          "id": 45,
          "username": "ram_officer",
          "full_name": "Ram Officer",
          "email": "ram@example.com",
          "phone_number": "9876543210",
          "role": "Field Officer"
        }
      },
      "farms": [...],
      "farms_count": 1
    }
  ]
}
```

### 3. FARM DETAILS SECTION (Complete)
```json
{
  "farms": [
    {
      "id": 34,
      "farm_uid": "2dbe327b-d443-46d3-bb2c-1bf9fc9947b9",
      "farm_owner": {
        "id": 58,
        "username": "faxokew458",
        "full_name": "OMRAM Thakur",
        "email": "demo222@gmail.com",
        "phone_number": "9123456874"
      },
      "address": "Shirdi, Niphad, Ahmedabad",
      "area_size": "0.07",
      "area_size_numeric": 0.07,
      "soil_type": {
        "id": 3,
        "name": "Loamy"
      },
      "crop_type": {
        "id": 5,
        "crop_type": "Sugarcane",
        "plantation_type": "adsali",
        "plantation_type_display": "Adsali",
        "planting_method": "3_bud",
        "planting_method_display": "3 Bud Method"
      },
      "farm_document": {
        "name": "farm_doc.pdf",
        "url": "/media/farm_docs/farm_doc.pdf",
        "size": 1024000
      },
      "created_at": "2025-08-19T07:23:15.934661Z",
      "updated_at": "2025-08-19T07:23:15.934672Z",
      "created_by": {
        "id": 45,
        "username": "ram_officer",
        "full_name": "Ram Officer",
        "email": "ram@example.com",
        "phone_number": "9876543210"
      },
      "irrigations": [...],
      "irrigations_count": 1
    }
  ]
}
```

### 4. IRRIGATION DETAILS SECTION (Complete)
```json
{
  "irrigations": [
    {
      "id": 15,
      "irrigation_type": "Drip",
      "irrigation_type_code": "Drip",
      "irrigation_source": "Well",
      "location": {
        "type": "Point",
        "coordinates": [73.85553239999999, 18.5203924]
      },
      "installation_date": "2025-08-21",
      "last_maintenance": null,
      "status": true,
      "status_display": "Active",
      "motor_horsepower": null,
      "pipe_width_inches": null,
      "distance_motor_to_plot_m": null,
      "plants_per_acre": null,
      "flow_rate_lph": null,
      "emitters_count": null
    }
  ]
}
```

### 5. AGRICULTURAL SUMMARY SECTION
```json
{
  "agricultural_summary": {
    "total_plots": 1,
    "total_farms": 1,
    "total_irrigations": 1,
    "crop_types": ["Sugarcane"],
    "plantation_types": ["Adsali"],
    "irrigation_types": ["Drip"],
    "total_farm_area": 0.07
  }
}
```

### 6. FASTAPI INTEGRATION SECTION
```json
{
  "fastapi_integration": {
    "plot_ids_format": "GAT_NUMBER_PLOT_NUMBER",
    "compatible_services": ["Admin.py", "ET.py", "field.py", "main.py", "events.py", "soil.py"],
    "note": "Use fastapi_plot_id for calling FastAPI analysis services"
  }
}
```

---

## üîß COMPLETE FEATURES INCLUDED

### ‚úÖ **FARMER PROFILE DATA**
- Complete personal information (name, email, phone)
- Profile picture details (if available)
- Structured address information
- Account status and timestamps
- Role and permissions

### ‚úÖ **PLOT DETAILS (Complete)**
- Django database ID and FastAPI plot ID
- GAT number and plot number
- **GPS Coordinates**: Latitude, longitude, full coordinate arrays
- **Boundary Polygons**: Complete polygon coordinates for mapping
- Full address breakdown (village, taluka, district, state, country, PIN)
- Ownership details (farmer + who created it)
- Timestamps (created, updated)

### ‚úÖ **FARM DETAILS (Complete)**
- Farm ID and unique farm UID
- Farm owner complete information
- **Area**: Both string and numeric values
- **Soil Type**: ID and name
- **Crop Information**: Complete crop details with display names
- **Farm Documents**: File details if available
- Creation and update timestamps
- Who created the farm

### ‚úÖ **IRRIGATION DETAILS (Complete)**
- Irrigation system ID
- **Type**: Both display name and code
- **Source**: Water source information
- **GPS Location**: Irrigation system coordinates
- **Installation Date**: When system was installed
- **Last Maintenance**: Maintenance history
- **Status**: Active/inactive with display text
- **Technical Specs**: Motor HP, pipe width, flow rates
- **Distance**: Distance from motor to plot
- **Planting Details**: Plants per acre, emitters count

### ‚úÖ **COORDINATE SYSTEMS**
- **Plot Location**: Point coordinates (lat/long)
- **Plot Boundaries**: Polygon coordinates for mapping
- **Irrigation Location**: GPS coordinates for irrigation systems
- **Coordinate Format**: Both GeoJSON and separate lat/long values

### ‚úÖ **OWNERSHIP & AUDIT TRAIL**
- Who owns each plot/farm
- Who created each record
- Complete timestamps for all operations
- Role information for field officers

---

## üì± MOBILE APP & FRONTEND READY

### **Data Structure Benefits:**
- **Hierarchical Organization**: Easy to navigate and display
- **Complete Information**: No need for additional API calls
- **GPS Ready**: All coordinates in standard formats
- **Mapping Compatible**: Polygon boundaries for GIS applications
- **FastAPI Integration**: Direct compatibility with analysis services

### **Use Cases:**
- **Farmer Dashboard**: Complete profile overview
- **Mobile Apps**: All data in single API call
- **Mapping Applications**: GPS coordinates and boundaries
- **Agricultural Analysis**: Integration with FastAPI services
- **Document Management**: Farm documents and records

---

## üöÄ EXAMPLE CURL REQUEST

```bash
# Get complete farmer profile with all data
curl -X GET "http://localhost:8000/api/farms/my-profile/" \
  -H "Authorization: Bearer YOUR_FARMER_TOKEN" \
  -H "Content-Type: application/json"
```

---

## üîê SECURITY & ACCESS CONTROL

- **Role-Based Access**: Only farmers can access their own profile
- **Data Isolation**: Farmers only see their own data
- **Authentication Required**: Bearer token authentication
- **No Cross-User Access**: Complete data privacy

---

## üìä COMPARISON WITH OTHER APIs

| API Endpoint | Purpose | Data Richness | User Type |
|--------------|---------|---------------|-----------|
| `/farms/my-profile/` | **Complete farmer profile** | **‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ALL DATA** | **Farmer only** |
| `/farms/recent-farmers/` | Field officer view | ‚≠ê‚≠ê‚≠ê‚≠ê High | Field officer |
| `/farms/my-farmers/` | Field officer farmers list | ‚≠ê‚≠ê‚≠ê Medium | Field officer |
| `/users/me/` | Basic user profile | ‚≠ê‚≠ê Low | All users |

---

## üéØ SUMMARY

The enhanced `/farms/my-profile/` API now provides:

‚úÖ **COMPLETE DATA**: Every field stored in the database  
‚úÖ **GPS COORDINATES**: Latitude, longitude, and polygon boundaries  
‚úÖ **IRRIGATION DETAILS**: Complete system information with locations  
‚úÖ **FARM DOCUMENTS**: File details and metadata  
‚úÖ **OWNERSHIP TRAIL**: Complete audit trail of who created what  
‚úÖ **FASTAPI INTEGRATION**: Plot IDs for analysis services  
‚úÖ **MOBILE READY**: Structured data perfect for mobile apps  
‚úÖ **MAPPING COMPATIBLE**: All coordinates in standard formats  

This API now serves as the **single source of truth** for farmers to access all their agricultural data, making it perfect for mobile applications, dashboards, and integration with other services.

# üåæ **FARM MANAGEMENT SYSTEM - HIERARCHICAL STRUCTURE DIAGRAM**

## üèóÔ∏è **USER ROLES & PERMISSIONS HIERARCHY**

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                           SUPER ADMIN (Django Superuser)                    ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Full system access                               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Can manage all users, roles, and data            ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Override all permissions                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Access to Django admin interface                 ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                              ADMIN ROLE                                     ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Manage all users (except super admin)            ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Full CRUD on farms, plots, equipment            ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Access to all system data                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Can create/assign managers                       ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Override all permissions                         ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                             MANAGER ROLE                                    ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Create and manage field officers                 ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ View field officer performance and statistics    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Manage equipment and inventory                    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Oversee farm operations                          ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Access to farm analytics and reports             ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Monitor field officer productivity               ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (creates & manages)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                          FIELD OFFICER ROLE                                ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Create and manage farmers                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Register plots and farms                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Auto-assign farmers to plots/farms               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Access to assigned farmers' data                 ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Manage farm equipment and irrigation             ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Upload farm documents and images                 ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Sync data with FastAPI analysis services         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Created by: Manager                              ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (creates & manages)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                             FARMER ROLE                                    ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ View own farms and plots                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Access farm analytics and reports                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ View irrigation and equipment status             ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Receive task assignments                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Limited to own data only                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Created by: Field Officer                        ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

## üåæ **FARM MANAGEMENT ENTITY HIERARCHY**

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                              MANAGER                                       ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Creates field officers                           ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Monitors field officer performance               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Oversees farm operations                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Manages equipment and inventory                  ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Views analytics and reports                      ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (creates & manages)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                              FIELD OFFICER                                 ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Creates farmers                                   ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Registers plots                                  ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Establishes farms                                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Manages equipment                                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Sets up irrigation                               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Created by: Manager                              ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (creates)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                              FARMER (User)                                 ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Personal Information                             ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Name, email, phone, address                    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Village, taluka, district, state               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Profile picture                                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Role: 'farmer'                                   ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Created by: Field Officer                        ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (owns)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                PLOT                                       ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Land Identification                              ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - GAT Number (Government Land Number)            ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Plot Number                                    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Village, Taluka, District, State               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - PIN Code, Country                              ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Geographic Data                                  ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - GPS Coordinates (Point)                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Boundary Polygon                               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Ownership                                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Farmer (auto-assigned)                         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Created by (Field Officer)                     ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (contains)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                FARM                                       ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Farm Details                                     ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Unique Farm UID                                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Address                                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Area Size (acres)                              ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Agricultural Data                                ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Soil Type (Loamy, Clay, Sandy, etc.)           ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Crop Type (Sugarcane, Rice, Wheat, etc.)       ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Plantation Type (Adsali, Suru, Ratoon)         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Planting Method (3 Bud, 2 Bud, 1 Bud)         ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Ownership                                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Farm Owner (Farmer)                            ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Created by (Field Officer)                     ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Linked Plot                                    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Documents                                        ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Farm Documents                                 ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº (has)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                            FARM COMPONENTS                                 ‚îÇ
‚îÇ                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Farm Images                                      ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Field photos                                   ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Crop status images                             ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Document scans                                 ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Farm Sensors                                     ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Soil moisture sensors                          ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Weather stations                               ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Crop health monitors                           ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ ‚Ä¢ Farm Irrigation                                  ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Irrigation type (Drip, Sprinkler, Flood)       ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Water source (Well, Canal, River, Borewell)    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Technical specs (HP, pipe width, flow rate)    ‚îÇ ‚îÇ
‚îÇ                    ‚îÇ   - Installation and maintenance dates             ‚îÇ ‚îÇ
‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

## üîÑ **AUTO-ASSIGNMENT WORKFLOW**

```
Field Officer Workflow:
1. Create Farmer ‚Üí POST /users/users/
2. Create Plot ‚Üí POST /farms/plots/ (auto-assigns to recent farmer)
3. Create Farm ‚Üí POST /farms/farms/ (auto-assigns to recent farmer + links plot)

Auto-Assignment Logic:
‚Ä¢ Time Window: 30 minutes (configurable)
‚Ä¢ Fallback: Farmers created today
‚Ä¢ Safety: Only assign users with role='farmer'
‚Ä¢ Validation: Field officer must have role='fieldofficer'
```

## üìä **DATA RELATIONSHIPS**

```
User (Farmer)
‚îú‚îÄ‚îÄ plots (Plot) - One-to-Many
‚îÇ   ‚îú‚îÄ‚îÄ farms (Farm) - One-to-Many
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ farm_images (FarmImage) - One-to-Many
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ farm_sensors (FarmSensor) - One-to-Many
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ farm_irrigations (FarmIrrigation) - One-to-Many
‚îÇ   ‚îî‚îÄ‚îÄ boundary (GIS Polygon)
‚îî‚îÄ‚îÄ farms (Farm) - One-to-Many

Field Officer
‚îú‚îÄ‚îÄ created_farmers (User) - One-to-Many
‚îú‚îÄ‚îÄ created_plots (Plot) - One-to-Many
‚îî‚îÄ‚îÄ created_farms (Farm) - One-to-Many

Plot
‚îú‚îÄ‚îÄ farmer (User) - Many-to-One
‚îú‚îÄ‚îÄ farms (Farm) - One-to-Many
‚îî‚îÄ‚îÄ created_by (User) - Many-to-One

Farm
‚îú‚îÄ‚îÄ farm_owner (User) - Many-to-One
‚îú‚îÄ‚îÄ plot (Plot) - Many-to-One
‚îú‚îÄ‚îÄ soil_type (SoilType) - Many-to-One
‚îú‚îÄ‚îÄ crop_type (CropType) - Many-to-One
‚îî‚îÄ‚îÄ created_by (User) - Many-to-One
```

## üéØ **PERMISSION MATRIX**

| Action | Super Admin | Admin | Manager | Field Officer | Farmer |
|--------|-------------|-------|---------|---------------|---------|
| **User Management** | ‚úÖ All | ‚úÖ All (except super) | ‚úÖ Limited | ‚ùå None | ‚ùå None |
| **Create Farmers** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| **Create Plots** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| **Create Farms** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| **View All Data** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ Own farmers | ‚ùå Own only |
| **Edit All Data** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ Own farmers | ‚ùå Own only |
| **Delete Data** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ Own farmers | ‚ùå None |
| **Equipment Mgmt** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| **Inventory Mgmt** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| **Task Assignment** | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå View own |

## üåê **FASTAPI INTEGRATION**

```
Django Backend (Port 8000)
‚îú‚îÄ‚îÄ Admin.py (Port 7030) - SAR Index Mapping
‚îú‚îÄ‚îÄ ET.py (Port 8009) - Evapotranspiration
‚îú‚îÄ‚îÄ events.py (Port 9000) - Agriculture Analysis
‚îú‚îÄ‚îÄ field.py (Port 7002) - Vegetation Health
‚îú‚îÄ‚îÄ main.py (Port 8003) - Enhanced Soil Analysis
‚îî‚îÄ‚îÄ soil.py (Port 8001) - Basic Soil Analysis

Sync Mechanism:
‚Ä¢ Bidirectional data synchronization
‚Ä¢ Real-time plot updates
‚Ä¢ Automatic service notification
‚Ä¢ Data consistency across all services
```

## üìã **KEY FEATURES BY ROLE**

### **Field Officer Capabilities:**
- ‚úÖ Create and manage farmers
- ‚úÖ Register land plots with GPS coordinates
- ‚úÖ Establish farms with agricultural data
- ‚úÖ Set up irrigation systems
- ‚úÖ Manage farm equipment
- ‚úÖ Upload farm documentation
- ‚úÖ Auto-assignment system for efficiency
- ‚úÖ Access to FastAPI analysis services

### **Farmer Capabilities:**
- ‚úÖ View own farm data and analytics
- ‚úÖ Access crop health reports
- ‚úÖ Monitor irrigation status
- ‚úÖ View equipment status
- ‚úÖ Receive task assignments
- ‚úÖ Access soil analysis results

### **Manager Capabilities:**
- ‚úÖ Oversee field officer operations
- ‚úÖ View farm analytics and reports
- ‚úÖ Manage equipment and inventory
- ‚úÖ Monitor system performance
- ‚úÖ Access to all farm data

### **Admin Capabilities:**
- ‚úÖ Full system management
- ‚úÖ User role assignment
- ‚úÖ System configuration
- ‚úÖ Data backup and maintenance
- ‚úÖ Override all permissions

---

# üöÄ **PROJECT STATUS: ALL SERVICES RUNNING SUCCESSFULLY**

## ‚úÖ **RUNNING SERVICES STATUS**

### **üåê Django Backend (Main Application)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 8000
- **URL**: http://localhost:8000/
- **Admin**: http://localhost:8000/admin/
- **API**: http://localhost:8000/api/
- **Database**: PostgreSQL (neoce) - ‚úÖ **CONNECTED**
- **Migrations**: ‚úÖ **ALL APPLIED**
- **Features**: 
  - User Management with Role-Based Access Control
  - Farm Management with GIS capabilities
  - Auto-assignment system for field officers
  - Complete CRUD operations for all entities

### **üî¨ FastAPI Analysis Services (All Running)**

#### **1. SAR Index Mapping API (Admin.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 7030
- **URL**: http://localhost:7030/
- **Purpose**: Sentinel-1 SAR analysis, vegetation indices
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE** - Loaded 11 plots

#### **2. Evapotranspiration API (ET.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 8009
- **URL**: http://localhost:8009/
- **Purpose**: ET computation using Sentinel-2 data
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE**

#### **3. Agriculture Analysis API (events.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 9000
- **URL**: http://localhost:9000/
- **Purpose**: Comprehensive analysis (Brix, Recovery, Sugar Yield)
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE** - 11 plots loaded
- **Features**: 
  - Brix, Recovery, and Sugar Yield analysis
  - Vegetation indices (NDVI, NDRE, MSAVI, NDMI, NDWI)
  - Biomass estimation using Sentinel-1 RVI
  - Stress detection and irrigation planning
  - Harvest analysis and growth stage tracking

#### **4. Vegetation Health API (field.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 7002
- **URL**: http://localhost:7002/
- **Purpose**: Sentinel-1 SAR vegetation health analysis
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE**

#### **5. Enhanced Soil Analysis API (main.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 8003
- **URL**: http://localhost:8003/
- **Purpose**: NPK + SAR-based Fe analysis
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE** - 11 plots loaded
- **Features**:
  - Soil parameter analysis
  - NPK analysis
  - Fe Index analysis using Sentinel-1 SAR

#### **6. Basic Soil Analysis API (soil.py)**
- **Status**: ‚úÖ **RUNNING**
- **Port**: 8001
- **URL**: http://localhost:8001/
- **Purpose**: Basic soil parameter analysis
- **Data Source**: Django /plots/ API
- **Response**: ‚úÖ **ACTIVE** - Swagger UI available at /docs

### **üóÑÔ∏è Database & Infrastructure**
- **PostgreSQL**: ‚úÖ **RUNNING** (neoce database)
- **PostGIS**: ‚úÖ **ENABLED** (GIS extensions)
- **Virtual Environment**: ‚úÖ **ACTIVATED** (envm)
- **Dependencies**: ‚úÖ **ALL INSTALLED**

### **ü§ñ AI Integration**
- **Qwen AI Model**: ‚úÖ **LOADED** (MiniPLM-Qwen-200M-Q8_0.gguf)
- **Chatbot API**: ‚úÖ **READY** (Port 8000)
- **Model Status**: 203.44M parameters, 206.27 MiB

## üåü **SYSTEM FEATURES STATUS**

### **‚úÖ Core Features Working**
- **User Authentication & Authorization**: ‚úÖ Role-based access control
- **Farm Management**: ‚úÖ Complete CRUD operations
- **Plot Management**: ‚úÖ GIS integration with boundaries
- **Auto-Assignment**: ‚úÖ Field officer workflow automation
- **Data Synchronization**: ‚úÖ Bidirectional Django ‚Üî FastAPI sync
- **GIS Capabilities**: ‚úÖ PostGIS, Leaflet integration
- **File Management**: ‚úÖ Document and image uploads
- **Equipment & Inventory**: ‚úÖ Complete management system
- **Task Management**: ‚úÖ Assignment and tracking
- **Vendor Management**: ‚úÖ Purchase orders and communications

### **‚úÖ Advanced Analytics**
- **Satellite Data Analysis**: ‚úÖ Sentinel-1 & Sentinel-2 integration
- **Vegetation Indices**: ‚úÖ NDVI, NDRE, MSAVI, NDMI, NDWI
- **Soil Analysis**: ‚úÖ NPK, Fe Index, SAR-based analysis
- **Crop Health Monitoring**: ‚úÖ Stress detection, irrigation planning
- **Harvest Planning**: ‚úÖ Growth stage tracking, optimal timing
- **Biomass Estimation**: ‚úÖ RVI-based analysis

## üéØ **ACCESS POINTS**

### **üåê Web Interfaces**
- **Main Application**: http://localhost:8000/
- **Django Admin**: http://localhost:8000/admin/
- **API Documentation**: http://localhost:8000/api/
- **Swagger UI**: Available on all FastAPI services

### **üîå API Endpoints**
- **Django REST API**: http://localhost:8000/api/
- **SAR Analysis**: http://localhost:7030/
- **ET Analysis**: http://localhost:8009/
- **Agriculture Analysis**: http://localhost:9000/
- **Vegetation Health**: http://localhost:7002/
- **Soil Analysis**: http://localhost:8003/
- **Basic Soil**: http://localhost:8001/

### **üì± Mobile/Client Access**
- **CORS Enabled**: ‚úÖ All origins allowed
- **JWT Authentication**: ‚úÖ Token-based security
- **GeoJSON Support**: ‚úÖ GIS data export
- **File Uploads**: ‚úÖ Document and image support

## üöÄ **NEXT STEPS**

### **For Field Officers:**
1. **Access**: http://localhost:8000/admin/ (create superuser first)
2. **Create Roles**: Set up admin, manager, field officer roles
3. **Register Farmers**: Use the user management system
4. **Create Plots**: Use farm management with GIS boundaries
5. **Establish Farms**: Link plots to farmers automatically

### **For Developers:**
1. **API Testing**: Use Postman collection provided
2. **Frontend Integration**: Connect to Django REST API
3. **GIS Integration**: Use GeoJSON endpoints for mapping
4. **AI Features**: Integrate with chatbot API

### **For System Administrators:**
1. **Monitor Services**: All 7 services running successfully
2. **Database Health**: PostgreSQL with PostGIS active
3. **Performance**: Monitor resource usage across services
4. **Backup**: Regular database and file backups

## üéâ **PROJECT SUCCESSFULLY DEPLOYED!**

**All services are running and ready for production use. The farm management system is fully operational with complete GIS capabilities, AI-powered analytics, and automated workflows for field officers.** 

---

# üéØ **NEW: MANAGER FIELD OFFICERS API**

## üìã **API Endpoint: Manager Field Officers**

### **üåê Endpoint Details**
- **URL**: `GET /api/users/my-field-officers/`
- **Method**: GET
- **Authentication**: Required (JWT Token)
- **Permission**: Manager Role Only
- **Purpose**: Get all field officers created by the logged-in manager

### **üîê Authentication**
```bash
# Get OTP
POST /api/users/send_otp/
{
    "email": "manager@example.com"
}

# Verify OTP and get token
POST /api/users/verify_otp/
{
    "email": "manager@example.com",
    "otp": "123456"
}

# Use token in header
Authorization: Bearer <access_token>
```

### **üìä Response Format**
```json
{
    "manager": {
        "id": 1,
        "username": "manager1",
        "first_name": "John",
        "last_name": "Manager",
        "email": "manager@example.com"
    },
    "summary": {
        "total_field_officers": 3,
        "total_farmers": 15,
        "total_plots": 25,
        "total_farms": 20
    },
    "field_officers": [
        {
            "id": 2,
            "username": "fieldofficer1",
            "email": "fo1@example.com",
            "first_name": "Alice",
            "last_name": "Officer",
            "phone_number": "+1234567890",
            "address": "123 Main St",
            "village": "Sample Village",
            "state": "Maharashtra",
            "district": "Ahmednagar",
            "taluka": "Sangamner",
            "profile_picture": null,
            "created_by": {
                "id": 1,
                "username": "manager1",
                "first_name": "John",
                "last_name": "Manager",
                "role": "manager"
            },
            "date_joined": "2024-08-25T10:00:00Z",
            "last_login": "2024-08-25T15:30:00Z",
            "farmers_count": 5,
            "plots_count": 8,
            "farms_count": 7
        }
    ]
}
```

### **üéØ Key Features**

#### **‚úÖ Manager Information**
- Complete manager profile details
- Manager ID, username, name, email

#### **‚úÖ Summary Statistics**
- Total field officers under the manager
- Total farmers created by all field officers
- Total plots registered by all field officers
- Total farms established by all field officers

#### **‚úÖ Field Officer Details**
- Complete field officer profiles
- Contact information and addresses
- Creation and last login timestamps
- Performance metrics:
  - **farmers_count**: Number of farmers created
  - **plots_count**: Number of plots registered
  - **farms_count**: Number of farms established

#### **‚úÖ Hierarchy Tracking**
- **created_by**: Shows which manager created each field officer
- Proper role-based access control
- Manager can only see their own field officers

### **üîß Implementation Details**

#### **Database Changes**
```python
# Added to User model
created_by = models.ForeignKey(
    'self',
    on_delete=models.SET_NULL,
    null=True,
    blank=True,
    related_name='created_users',
    help_text="Manager who created this user"
)
```

#### **Serializer Features**
```python
class FieldOfficerSerializer(serializers.ModelSerializer):
    # Auto-calculated statistics
    farmers_count = serializers.SerializerMethodField()
    plots_count = serializers.SerializerMethodField()
    farms_count = serializers.SerializerMethodField()
    
    # Hierarchy information
    created_by = serializers.SerializerMethodField()
```

#### **Permission Control**
```python
# Only managers can access this endpoint
if not user.has_role('manager'):
    return Response(
        {'error': 'Only managers can access this endpoint'}, 
        status=403
    )
```

### **üöÄ Usage Examples**

#### **1. Get All Field Officers**
```bash
curl -X GET "http://localhost:8000/api/users/my-field-officers/" \
  -H "Authorization: Bearer <your_jwt_token>" \
  -H "Content-Type: application/json"
```

#### **2. Frontend Integration**
```javascript
// React/JavaScript example
const getFieldOfficers = async () => {
    const response = await fetch('/api/users/my-field-officers/', {
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    });
    
    const data = await response.json();
    console.log('Manager:', data.manager);
    console.log('Summary:', data.summary);
    console.log('Field Officers:', data.field_officers);
};
```

#### **3. Dashboard Integration**
```python
# Django view example
def manager_dashboard(request):
    if request.user.has_role('manager'):
        field_officers = User.objects.filter(
            created_by=request.user,
            role__name='fieldofficer'
        )
        context = {
            'field_officers': field_officers,
            'total_farmers': sum(fo.created_users.filter(role__name='farmer').count() 
                               for fo in field_officers)
        }
        return render(request, 'manager_dashboard.html', context)
```

### **üìà Benefits**

#### **For Managers:**
- ‚úÖ **Complete Overview**: See all field officers under their management
- ‚úÖ **Performance Tracking**: Monitor field officer productivity
- ‚úÖ **Hierarchy Management**: Maintain clear reporting structure
- ‚úÖ **Data Analytics**: Track farmers, plots, and farms creation

#### **For System Administrators:**
- ‚úÖ **Access Control**: Proper role-based permissions
- ‚úÖ **Data Integrity**: Hierarchical data relationships
- ‚úÖ **Audit Trail**: Track who created whom
- ‚úÖ **Scalability**: Supports multiple managers and field officers

#### **For Developers:**
- ‚úÖ **RESTful API**: Standard HTTP methods and responses
- ‚úÖ **JWT Authentication**: Secure token-based access
- ‚úÖ **Comprehensive Data**: All necessary information in one call
- ‚úÖ **Error Handling**: Proper HTTP status codes and error messages

### **üîç Testing**

#### **Test Script Available**
```bash
# Run the test script
python test_manager_api.py
```

#### **Manual Testing**
1. Create a manager user in Django admin
2. Create field officers under that manager
3. Get manager's email and send OTP
4. Use the API with authentication token
5. Verify response contains correct field officers

### **üéâ API Successfully Implemented!**

**The Manager Field Officers API is now fully functional and ready for production use. Managers can now efficiently manage and monitor their field officers with comprehensive statistics and hierarchical data access.** 

